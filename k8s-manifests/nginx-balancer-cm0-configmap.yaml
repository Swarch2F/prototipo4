apiVersion: v1
data:
  nginx.balancer.conf: |
    # NGINX BALANCEADOR DE CARGA (SOLO FRONTEND)
    events {
        worker_connections 1024;
    }

    http {
        log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                          '$status $body_bytes_sent "$http_referer" '
                          '"$http_user_agent" "$http_x_forwarded_for"';
        include       /etc/nginx/mime.types;
        default_type  application/octet-stream;
        access_log /var/log/nginx/access.log main;
        error_log /var/log/nginx/error.log warn;
        server_tokens off;
        client_max_body_size 10M;
        keepalive_timeout 65s;

        upstream frontend {
            least_conn;
            server gx-fe-gradex-1:3000 weight=1 max_fails=3 fail_timeout=30s;
            server gx-fe-gradex-2:3000 weight=1 max_fails=3 fail_timeout=30s;
            server gx-fe-gradex-3:3000 weight=1 max_fails=3 fail_timeout=30s;
            keepalive 32;
        }

        # Mapea la dirección del backend a un ID de instancia legible
        map $upstream_addr $instance_id {
            default "unknown";
            "gx_fe_gradex_1:3000" "1";
            "gx_fe_gradex_2:3000" "2";
            "gx_fe_gradex_3:3000" "3";
        }

        server {
            listen 80;
            server_name _;
            return 301 https://$host$request_uri;
        }

        server {
            listen 443 ssl;
            server_name _;
            ssl_certificate /etc/nginx/ssl/certificate.crt;
            ssl_certificate_key /etc/nginx/ssl/private.key;
            ssl_trusted_certificate /etc/nginx/ssl/ca_bundle.crt;
            ssl_dhparam /etc/nginx/ssl/dhparam.pem;
            ssl_protocols TLSv1.2 TLSv1.3;
            ssl_ciphers ECDHE-RSA-AES256-GCM-SHA512:DHE-RSA-AES256-GCM-SHA512:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-SHA384;
            ssl_prefer_server_ciphers off;
            ssl_session_cache shared:SSL:10m;
            ssl_session_timeout 10m;
            ssl_session_tickets off;
            add_header Strict-Transport-Security "max-age=31536000; includeSubDomains; preload" always;
            add_header X-Frame-Options "SAMEORIGIN" always;
            add_header X-Content-Type-Options "nosniff" always;
            add_header X-XSS-Protection "1; mode=block" always;
            add_header Referrer-Policy "strict-origin-when-cross-origin" always;
            add_header Content-Security-Policy "default-src 'self'; script-src 'self' 'unsafe-inline' 'unsafe-eval'; style-src 'self' 'unsafe-inline'; img-src 'self' data: https:; font-src 'self' data:; connect-src 'self' https://localhost:444 https://nginx-proxy:444;" always;


            # Bloquear IPs maliciosas (ejemplo básico)
            deny 192.168.1.100;  # Ejemplo de IP bloqueada
            # allow all;          # Permitir el resto

            location / {
                # --- WAF BÁSICO ---
                # Bloquear métodos no permitidos
                if ($request_method !~ ^(GET|POST|OPTIONS)$) {
                    return 405;
                }
                # Bloquear user-agents maliciosos
                if ($http_user_agent ~* (sqlmap|nikto|fuzz|acunetix|nmap|nessus|w3af|dirbuster|zaproxy|crawler|bot|scan)) {
                    return 403;
                }
                # Bloquear patrones comunes de inyección SQL
                if ($query_string ~* "(union.*select|select.*from|insert\\s+into|drop\\s+table|update\\s+set|delete\\s+from|information_schema|sleep\\()") {
                    return 403;
                }
                # Bloquear patrones comunes de XSS
                if ($query_string ~* "(<script|onerror=|onload=|alert\\(|document\\.cookie|<img|<svg|<iframe)") {
                    return 403;
                }
                # Bloquear intentos de path traversal
                if ($request_uri ~* "\\.\\./|/etc/passwd|/bin/bash|/bin/sh") {
                    return 403;
                }

                proxy_pass http://frontend;
                proxy_http_version 1.1;
                proxy_set_header Upgrade $http_upgrade;
                proxy_set_header Connection 'upgrade';
                proxy_set_header Host $host;
                proxy_set_header X-Real-IP $remote_addr;
                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                proxy_set_header X-Forwarded-Proto https;
                proxy_cache_bypass $http_upgrade;
                proxy_connect_timeout 30s;
                proxy_send_timeout 30s;
                proxy_read_timeout 30s;
                proxy_set_header X-Frontend-Instance $upstream_addr;
                add_header X-Frontend-IP $upstream_addr always;
            }

            # Bloquear acceso a archivos sensibles
            location ~ /\. {
                deny all;
                access_log off;
                log_not_found off;
            }

            location ~ \.(sql|conf|config|bak|backup|swp|tmp)$ {
                deny all;
                access_log off;
                log_not_found off;
            }
        }
    }
kind: ConfigMap
metadata:
  annotations:
    use-subpath: "true"
  labels:
    io.kompose.service: nginx-balancer
  name: nginx-balancer-cm0
